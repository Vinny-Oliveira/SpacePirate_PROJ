#pragma kernel computeGrid
#pragma kernel cacheDistField
#pragma kernel clearCachedDistField
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel computeGridForMesh
#pragma kernel computeMesh
#pragma kernel filterSolidsPerChunk
#include"claySDF.compute"
RWStructuredBuffer<int> indirectChunkArgs1,indirectChunkArgs2;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int2> pointCloudData;RWStructuredBuffer<int> pointCloudDataToSolidId;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float> fieldCache1;RWStructuredBuffer<uint> fieldCache2;
#if DRAW_DEBUG
RWStructuredBuffer<float3> debugGridOutPoints;
#endif
StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;float3 chunkCenter=float3(0.,0.,0.);int numChunksX=0,numChunksY=0,numChunksZ=0,fieldCacheSize1=0,fieldCacheSize2=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int storeSolidId=0,chunkMaxOutPoints=0;static const int3 localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int f,int i,int c,int s){return f+s*(i+s*c);}uint f(float3 f){uint s=uint(f.x*255)+uint(f.y*255)*256+uint(f.z*255)*256*256;return s;}uint f(uint f,uint x,uint y,uint S,uint s){uint c=(((f<<6|x)<<6|y)<<6|S)<<8|s;return c;}uint s(float f,float i,float s,float c){uint r=uint(round(f*63.)),u=uint(round(i*63.)),M=uint(round(s*63.)),e=uint((c+1.)*.5*16383.),k=((r<<6|u)<<6|M)<<14|e;return k;}float4 s(uint f){float i=float(f&16383)/16383*2.-1.;f>>=14;float s=float(f&63)/63;f>>=6;float c=float(f&63)/63,u=float(f>>6)/63;return float4(u,c,s,i);}float f(float f,float i,float s){float c=max(s-abs(f-i),0.);return min(f,i)-c*c*.25f/s;}float s(float f,float i,float s){float c=abs(s),u=max(c-abs(-f-i),0.);return max(-f,i)+u*u*.25/c;}bool f(uint f,uint c){uint s=c/32;int i=solidsFilter[f*maxSolidsPerVoxelMask+s],u=c-32*s;if(i>>u&1)return true;return true;}void s(uint f,uint c){uint s=c/32;int t=solidsFilter[f*maxSolidsPerVoxelMask+s],i=c-32*s;solidsFilter[f*maxSolidsPerVoxelMask+s]=t&~(1<<i);}bool c(int f){return f>>0&1;}float c(float3 i,float y,float S,uint x,uint u){float r;
#if CLAYXELS_CACHEON
r=fieldCache1[chunkId*fieldCacheSize1+u];
#else
r=1e+10;
#endif
int t=0;uint e=u*maxSolidsPerVoxel;for(uint g=0;g<x;++g){if(!f(u,g)){continue;}uint k=prefilteredSolidIds[e+g];float3 M=solidsScale[k];float m=(M.x+M.y+M.z)*.333333,z=solidsBlend[k]*m;float4 d=solidsAttrs[k];float p=computeClayDistanceFunction(solidsType[k],i,solidsPos[k],solidsRot[k],M,d,m);if(!c(d.w)){if(z==0.)r=min(p,r);else if(z>0.)r=f(p,r,z);else r=s(p,r,z);}if(p>S)s(u,g);S-=abs(z);}return r;}float c(float3 i,float u,out int r,out float3 S,uint x,uint y,uint k){float z;
#if CLAYXELS_CACHEON
float4 t=s(fieldCache2[chunkId*fieldCacheSize2+k]);z=t.w;S=t.xyz;
#else
z=1e+10;S=float3(1.,1.,1.);
#endif
uint e=y*maxSolidsPerVoxel;for(uint g=0;g<x;++g){if(!f(y,g)){continue;}uint d=prefilteredSolidIds[e+g];float3 M=solidsScale[d];float m=(M.x+M.y+M.z)*.333333,p=solidsBlend[d]*m;float3 n=solidsColor[d];float4 v=solidsAttrs[d];float D=computeClayDistanceFunction(solidsType[d],i,solidsPos[d],solidsRot[d],M,v,m);if(D<z)r=d;bool w=c(v.w);if(p==0.){float o=clamp((z-D)/(u*2.),0.,1.);S=lerp(S,n,o);if(!w)z=min(D,z);}else if(p>0.){float o=clamp(.5+.5*(D-z)/p,0.,1.);S=lerp(n,S,o);if(!w)z=f(D,z,p);}else{float o=clamp(.5+.5*(-D-z)/p,0.,1.);S=lerp(n,S,o);if(!w)z=s(D,z,p);if(o<.5)r=d;}}return z;}float3 d(uint f){int i=(f&255)>>0,u=(f&65280)>>8,r=(f&16711680)>>16;return float3(i/255.,u/255.,r/255.);}int3 t(uint f){int i=(f&255)>>0,u=(f&65280)>>8,z=(f&16711680)>>16;return int3(i,u,z);}bool r(int3 f){if(f.x<0)return true;if(f.x>255)return true;if(f.y<0)return true;if(f.y>255)return true;if(f.z<0)return true;if(f.z>255)return true;return false;}float i(int4 f){float s=0.;for(uint i=0;i<numSolids;++i)s+=abs(solidsBlend[i]);return s;}float3 c(int3 f,float i){float s=i*.5,z=chunkSize*.5;float3 c=float3(i*f.x-z,i*f.y-z,i*f.z-z)+s;return c;}void d(float3 f,float c,uint s,inout uint i,inout float S){uint e=numSolidsPerChunk[chunkId],u=s*maxSolidsPerVoxel,r=0;for(r=0;r<e;++r){uint d=solidsPerChunk[chunkId*maxSolids+r];float3 M=solidsScale[d],z=f;if(int(solidsAttrs[d].w)>>1&1)z.x=abs(z.x);float y=max(M.x,max(M.y,M.z))*1.732,g=length(solidsPos[d]-z)-y,m=(M.x+M.y+M.z)*.333333,o=m*2.;if(g<o){prefilteredSolidIds[u+i]=d;i+=1;S+=abs(solidsBlend[d])*m;if(i==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float s=chunkSize/64;float3 u=c(i,s);int z=f(i.x,i.y,i.z,64);if(z==0)indirectDrawArgs[0]=0;uint r=0;float M=0.;d(u+chunkCenter,s*.5,z,r,M);float t=s*.25,y=t*.5,g=s*.5,S=chunkSize/256,o=chunkSize*.5;int e=z*maxSolidsPerVoxelMask;for(uint x=0;x<maxSolidsPerVoxelMask;++x)solidsFilter[e+x]=-1;float D=c(u+chunkCenter,s,M+s,r,z);for(uint k=0;k<8;++k){float3 m=u+t*cardinalCellOffset[k];for(uint n=0;n<8;++n){float3 p=m+y*cardinalCellOffset[n];int3 v=int3(round((p.x+o-y)/S),round((p.y+o-y)/S),round((p.z+o-y)/S));int w=f(v.x,v.y,v.z,256);gridData[w]=float3(0,0,0);if(abs(D)<s){int l=0;float3 a=float3(1.,1.,1.);float C=c(p+chunkCenter,y,l,a,r,z,w);if(abs(C)<g){int X=solidsClayObjectId[l]+1;gridData[w]=float3(C,f(a),X);}}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void cacheDistField(int3 i:SV_DispatchThreadID){if(numSolidsPerChunk[chunkId]==0){return;}float z=chunkSize/64;float3 u=c(i,z);int y=f(i.x,i.y,i.z,64);uint r=0;float M=0.;d(u+chunkCenter,z*.5,y,r,M);float t=z*.25,S=t*.5,g=z*.5,o=chunkSize/256,m=chunkSize*.5;int e=y*maxSolidsPerVoxelMask;for(uint x=0;x<maxSolidsPerVoxelMask;++x)solidsFilter[e+x]=-1;float k=c(u+chunkCenter,z,M+z,r,y);fieldCache1[chunkId*fieldCacheSize1+y]=k;for(uint n=0;n<8;++n){float3 v=u+t*cardinalCellOffset[n];for(uint D=0;D<8;++D){float3 p=v+S*cardinalCellOffset[D];int3 a=int3(round((p.x+m-S)/o),round((p.y+m-S)/o),round((p.z+m-S)/o));int w=f(a.x,a.y,a.z,256);gridData[w]=float3(0,0,0);int l=0;float3 C=float3(1.,1.,1.);float X=c(p+chunkCenter,S,l,C,r,y,w);fieldCache2[chunkId*fieldCacheSize2+w]=s(C.x,C.y,C.z,clamp(X,-1.,1.));}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void clearCachedDistField(int3 i:SV_DispatchThreadID){float z=chunkSize/64;float3 t=c(i,z);int x=f(i.x,i.y,i.z,64);float u=z*.25,r=u*.5,M=z*.5,S=chunkSize/256,o=chunkSize*.5;fieldCache1[chunkId*fieldCacheSize1+x]=1.;float e=s(1.,1.,1.,1.);for(uint k=0;k<8;++k){float3 m=t+u*cardinalCellOffset[k];for(uint y=0;y<8;++y){float3 p=m+r*cardinalCellOffset[y];int3 g=int3(round((p.x+o-r)/S),round((p.y+o-r)/S),round((p.z+o-r)/S));int d=f(g.x,g.y,g.z,256);fieldCache2[chunkId*fieldCacheSize2+d]=e;}}}float d(float f,float c){float i=c-f,s=.5;if(i!=0.)s=f/i;return s;}float2 S(float2 f){float2 s=f.xy>=0.?1.:-1.,i=(1.-abs(f.yx))*s;return i;}float m(float2 f){int i=32;float c=floor(f.x*(i-1)),s=floor(f.y*(i-1)),r=c*i+s;return r;}float k(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:S(f.xy);f.xy=f.xy*.5+.5;float s=m(f.xy);return s;}int S(uint f,uint r,uint i,uint s){int c=f<<24|r<<16|i<<8|s;return c;}float p(float3 f){float s=dot(round(f*255),float3(65536,256,1));return s;}groupshared int3 gs_pointCloudData[255];groupshared uint gs_numElements,gs_globalOffset;void S(int3 i,float s){int e=f(i.x,i.y,i.z,256);float3 c=gridData[e];if(c.z==0.){return;}float u[8];uint x=0;for(int r=0;r<8;++r){int3 M=i+localGridCellCoords[r];int k=f(M.x,M.y,M.z,256);float3 p=gridData[k];if(p.z==0.){return;}u[r]=p.x;if(p.x<=0.)x|=1<<r;}int p=cubeEdgeFlags[x];if(p==0){return;}int k=x*16,z=triangleConnectionTable[k+3];float y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);float3 m=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];z=triangleConnectionTable[k+4];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);float3 M=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];z=triangleConnectionTable[k+5];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);float3 g=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z],o=m+M+g,n=cross(g-m,M-m);if(dot(n,n)>0.){z=triangleConnectionTable[k];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);m=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];z=triangleConnectionTable[k+1];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);M=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];z=triangleConnectionTable[k+2];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);g=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];n+=cross(g-m,M-m);z=triangleConnectionTable[k+6];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);m=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];z=triangleConnectionTable[k+7];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);M=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];z=triangleConnectionTable[k+8];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);g=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];n+=cross(g-m,M-m);z=triangleConnectionTable[k+9];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);m=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];z=triangleConnectionTable[k+10];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);M=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];z=triangleConnectionTable[k+11];y=d(u[edgeConnection[z].x],u[edgeConnection[z].y]);g=vertexOffset[edgeConnection[z].x]-y*edgeDirection[z];n+=cross(g-m,M-m);n=normalize(n);o/=3;int D=c.y,w=c.z;float3 v=o-float3(.5,.5,.5);float a=dot(v,n);float3 C=n;C/=abs(C.x)+abs(C.y)+abs(C.z);C.xy=C.z>=0.?C.xy:S(C.xy);C.xy=C.xy*.5+.5;a=a*.5+.5;int3 l=t(D);int X=0;InterlockedAdd(gs_numElements,1,X);if(X<255)gs_pointCloudData[X]=int3(S(i.x,i.y,i.z,uint(round(C.x*255.))),f(uint(round(a*63.)),uint(round(l.x/256.*63.)),uint(round(l.y/256.*63.)),uint(round(l.z/256.*63.)),uint(round(C.y*255.))),w);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 f:SV_DispatchThreadID,uint z:SV_GroupIndex){if(z==0)gs_numElements=0,gs_globalOffset=0;GroupMemoryBarrierWithGroupSync();float i=chunkSize/256;S(f,i);GroupMemoryBarrierWithGroupSync();if(z==0)InterlockedAdd(indirectDrawArgs[0],gs_numElements*3,gs_globalOffset),gs_globalOffset/=3;GroupMemoryBarrierWithGroupSync();if(z<gs_numElements){int3 c=gs_pointCloudData[z];int e=gs_globalOffset+z;pointCloudData[e]=c.xy;if(storeSolidId==1)pointCloudDataToSolidId[chunkId*chunkMaxOutPoints+e]=c.z;}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 i:SV_DispatchThreadID){
#if DRAW_DEBUG
int z=f(i.x,i.y,i.z,256);if(gridData[z].z!=0.){int e=debugGridOutPoints.IncrementCounter();float s=chunkSize/256;debugGridOutPoints[e]=c(i,s)+chunkCenter;}
#endif
}float4 v(uint f){int i=(f&255)>>0,u=(f&65280)>>8,z=(f&16711680)>>16;return float4(i/255.,u/255.,z/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMesh(int3 i:SV_DispatchThreadID){float s=chunkSize/64;float3 u=c(i,s);int z=f(i.x,i.y,i.z,64);uint r=0;float M=0.;d(u+chunkCenter,s*.5,z,r,M);float y=s*.25,S=y*.5,g=s*.5,o=chunkSize/256,m=chunkSize*.5;int e=z*maxSolidsPerVoxelMask;for(uint x=0;x<maxSolidsPerVoxelMask;++x)solidsFilter[e+x]=-1;float k=c(u+chunkCenter,s,M+s,r,z);for(uint n=0;n<8;++n){float3 t=u+y*cardinalCellOffset[n];for(uint D=0;D<8;++D){float3 p=t+S*cardinalCellOffset[D];int3 C=int3(round((p.x+m-S)/o),round((p.y+m-S)/o),round((p.z+m-S)/o));int w=f(C.x,C.y,C.z,256);gridData[w]=float3(0,0,0);int v=0;float3 l=float3(1.,1.,1.);float a=c(p+chunkCenter,S,v,l,r,z,w);int X=solidsClayObjectId[v]+1;gridData[w]=float3(a,f(l),X);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMesh(int3 i:SV_DispatchThreadID){float s=chunkSize/256;int z=f(i.x,i.y,i.z,256);float3 u=gridData[z];if(u.z==0.){return;}float n[8];int e=0,M=0;for(int r=0;r<8;++r){int3 p=i+localGridCellCoords[r];if(p.x<0||p.y<0||p.z<0||p.x>255||p.y>255||p.z>255){return;}int k=f(p.x,p.y,p.z,256);float3 t=gridData[k];n[r]=t.x;if(t.z==0.){continue;}if(t.x<0.)e|=1<<r;}int p=cubeEdgeFlags[e];if(p<0){return;}float3 t=c(i,s),g[12];for(int x=0;x<12;++x){if((p&1<<x)!=0){float y=n[edgeConnection[x].x],S=n[edgeConnection[x].y],m=d(y,S);g[x]=t+(vertexOffset[edgeConnection[x].x]-m*edgeDirection[x])*s;}}int k=e*16;for(int y=0;y<5;++y){int m=3*y;if(triangleConnectionTable[k+m]>=0){uint a=meshOutIndices.IncrementCounter();for(int S=0;S<3;++S){int w=triangleConnectionTable[k+m+S],o=a*3+S,D=u.y;meshOutPoints[o]=g[w]+chunkCenter;meshOutColors[o]=v(D);meshOutIndices[a][2-S]=o+outMeshIndexOffset;}}}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 f:SV_DispatchThreadID){int z=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;float y=chunkSize/256.f,i=chunkSize-y,u=chunkSize*.5;float3 s=float3(-(chunkSize*numChunksX*.5)+u+i*f.x,-(chunkSize*numChunksY*.5)+u+i*f.y,-(chunkSize*numChunksZ*.5)+u+i*f.z);float c=chunkSize*1.732*.5;int e=z*3,r=0;r=updateChunks[z]-1;int x=0;for(uint k=0;k<numSolids;++k){float3 p=solidsScale[k];float m=max(p.x,max(p.y,p.z))*1.732;float3 M=s;if(checkMirrorX(solidsAttrs[k].w))M.x=abs(M.x);float t=length(solidsPos[k]-M)-m;if(t<c){solidsPerChunk[z*maxSolids+x]=k;x+=1;if(r<=0){for(uint S=0;S<numSolidsUpdated;++S){uint g=solidsUpdated[S];if(g==k){r=1;break;}}}}}numSolidsPerChunk[z]=x;uint t=0,M=0;if(r>-1)t=64/MAXTHREADS,M=256/MAXTHREADS;updateChunks[z]=r;indirectChunkArgs1[e]=t;indirectChunkArgs1[e+1]=t;indirectChunkArgs1[e+2]=t;indirectChunkArgs2[e]=M;indirectChunkArgs2[e+1]=M;indirectChunkArgs2[e+2]=M;}